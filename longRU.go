package main

import (
	"bytes"
	"log"
	"os/exec"
	"time"
)

func main() {
	handle()
}

func handle() {
	otp := "GEREKLI GLOBAL 1 TL = 0,67 TMT √ñ≈áUNDEN T√ñLEGSIZ! Aksi√Ωa 23-nji aprelden 31-nji aprel aralygynda dowam ed√Ω√§r." +
		"1 TL = 0,67 –¢–ú–¢ –ë–ï–ó –ü–†–ï–î–û–ü–õ–ê–¢–´! –ê–∫—Ü–∏—è –ø—Ä–æ–¥–ª–∏—Ç—Å—è —Å 23 –ø–æ 31 –∞–ø—Ä–µ–ª—è. ‚úàÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞ —Å–∞–º–æ–ª–µ—Ç–æ–º: 1 –∫–≥/98 —Ç–º—Ç (7-15 –¥–Ω–µ–π) üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º: 1 –∫–≥/20 —Ç–º—Ç (30-45 –¥–Ω–µ–π)"

	phones := []string{
		"71193866", "71193866",
	}

	chunkSize := 5

	for chunkIndex := 0; chunkIndex < len(phones); chunkIndex += chunkSize {
		end := chunkIndex + chunkSize
		if end > len(phones) {
			end = len(phones)
		}
		phoneChunk := phones[chunkIndex:end]

		for _, phone := range phoneChunk {
			phoneWithCode := "993" + phone
			// Use single quotes to enclose the entire command to avoid issues with special characters
			command := `echo jora1603 | sudo -S gammu -c ~/.gammurc sendsms TEXT ` + phoneWithCode + ` -unicode -text "` + otp + `"`

			cmd := exec.Command("bash", "-c", command)
			var out bytes.Buffer
			cmd.Stdout = &out
			cmd.Stderr = &out

			err := cmd.Run()
			output := out.String()

			if err != nil {
				log.Printf("Error sending SMS to %s: %s\n", phoneWithCode, output)
			} else {
				log.Printf("SMS sent successfully to %s: %s\n", phoneWithCode, output)
			}
		}

		// Sleep for 8 seconds after each chunk, but not after the last chunk
		if chunkIndex+chunkSize < len(phones) {
			time.Sleep(8 * time.Second)
		}
	}
}

// getLengthOption returns the appropriate length option for gammu based on the message length
func getLengthOption(message string) string {
	messageLength := len(message)
	if messageLength <= 70 {
		return "70"
	}
	return "200"
}

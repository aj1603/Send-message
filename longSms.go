package main

import (
	"bytes"
	"log"
	"os/exec"
	"time"
)

func main() {
	handle()
}

func handle() {

	otp := "üòç–¢–µ–ª–µ–≤–∏–∑–æ—Ä LUCK –¥–∏–∞–≥–æ–Ω–∞–ª—å—é 50 –≤—Å–µ–≥–æ –∑–∞ 373 —Ç–º—Ç –≤ –º–µ—Å—è—Ü üéÅüì∫  \n" +
		"–£—Å–ª–æ–≤–∏—è –∞–∫—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã: \n" +
		"1Ô∏è‚É£–ü–æ–¥–æ–π–¥–∏—Ç–µ –≤ –æ—Ñ–∏—Å Gerekli —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º (–º—ã –ª–∏—à—å —Å–Ω–∏–º–∞–µ–º –∫–æ–ø–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤–∞–º) 2Ô∏è‚É£–û–ø–ª–∞—Ç–∏—Ç–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 373 —Ç–º—Ç –∏ –¢–ï–õ–ï–í–ò–ó–û–† –í–ê–®‚ùóÔ∏èüòÉ \n" +
		"–ü–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É ‚òéÔ∏è27-10-15‚òéÔ∏è \n" +
		"üòçLuck telewizory, 50-lik diagonally, bary √Ωogy 373 manat her a√Ω t√∂legliüéÅüì∫ \n" +
		"Aksi√Ωany≈à ≈üertleri √Ω√∂neke√Ω: \n" +
		"1Ô∏è‚É£Pasport bilen Gerekli ofisine geli≈à (biz di≈àe pasport nusgasyny alyp, resminamany yzyna ga√Ωtar√Ωarys) \n" +
		"2Ô∏è‚É£O≈à√ºnden ge√ßiril√Ω√§n 373 manady t√∂l√§≈à we telewizor sizi≈àki! \n" +
		"Go≈üma√ßa soraglar bo√Ωun√ßa ‚òéÔ∏è27-10-15‚òéÔ∏è telefon belgisine ja≈à edi√±"

	phones := []string{"71193866"}
	chunkSize := 5

	for chunkIndex := 0; chunkIndex < len(phones); chunkIndex += chunkSize {
		end := chunkIndex + chunkSize
		if end > len(phones) {
			end = len(phones)
		}
		phoneChunk := phones[chunkIndex:end]

		for _, phone := range phoneChunk {
			phoneWithCode := "993" + phone
			command := "echo gerekli1603 | sudo -S gammu -c ~/.gammurc sendsms TEXT " + phoneWithCode + " -unicode -len " + getLengthOption(otp) + " -text \"" + otp + "\""

			cmd := exec.Command("bash", "-c", command)
			var out bytes.Buffer
			cmd.Stdout = &out
			cmd.Stderr = &out

			err := cmd.Run()
			output := out.String()
			log.Println(phone)

			if err != nil {
				log.Printf("Error sending SMS to %s: %s\n", phoneWithCode, output)
			} else {
				log.Printf("SMS sent successfully to %s: %s\n", phoneWithCode, output)
			}
		}

		if chunkIndex+chunkSize < len(phones) {
			time.Sleep(15 * time.Second)
		}
	}
}

func getLengthOption(message string) string {
	messageLength := len(message)
	if messageLength <= 70 {
		return "70"
	}
	return "200"
}
